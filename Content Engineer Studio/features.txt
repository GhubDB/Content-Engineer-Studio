webscraping chat sessions for customer messages
- displaying messages and allow users to select/deselect them
- editing parts of the message so as to anonymize parts
- analyzing customer messages for parts to anonymize

webscrpaping chat sessions for bot messages
- analyzing bot messages for relevance
- displaying messages and allow users to select/deselect them

webscraping bot flows and suggesting relevant flows
- displaying flows and allow users to select/deselect them

read and edit open excel files
- open pages from links in excel for webscraping
- update open file with values from studio 
- navigate cells
- display completed and uncompleted rows
- display filename and worksheet in status bar

options
- turn webscraping on and off
- prompt user when overwriting existing data
- mark cells that are being worked on
- automate syncing open excel file to local disk
- automate detecting open excel files

count the highlighted flows & bot answers on every save and make the program learn from user input

display relevant FAQ for flows

opening chat test environment and webscraping the results
- insert text version of the chat into excel
- insert screenshot version of the chat into excel

ev. webscraping bot confidence measurements


requires further access/data
- writing settings to file or to registry
- displaying relevant flows and adding screenshots or path data to excel table
- open and auto fill tickets
- 



Notes:
- source.objectName() will find the object name from the source of an event
- self.sender() will find the id of the element that fired the event
- setContextMenuPolicy(Qt::ContextMenuPolicy policy) translates to combo.setContextMenuPolicy(Qt.PreventContextMenu)
- self.chat.cellWidget(0, 0) will get the widget in the specified cell. Use .toplainText() to get the text contents.