priorities:
reordering columns and sorting columns asc/desc breaks column role selection and multi index display
use column viewer to display columns and their roles (bot, customer, analysis, canned)
split testing and analysis into their own class and add modules as needed
use proxy model instead of filtered df
use enums for roles in data variables
add copy/paste for faq's
consider adding self.dataChanged.emit(index, index) to set data methods in models
add a dataframe of identical size to each dataframe and store cell background colors
adjust row to contents for all views that use the model
a view that allows for selecting bot/customer columns as well as canned and analysis columns
fix csv export or change to xlsx export
add a way to hide columns
add a way to add rows/columns
improve pandasgui performance
make a dataclass on self.store.data[df_title] to hold all models for dataframe_viewer and dataframe_explorer
add status_messsage_decorator to methods in all views
add a way to view pandasgui on second monitor
add resizeRowsToContents button to Dataframe Viewer
make links clickable
add internal move drag drop to auto_queue
fix column asc/desc sorting in working views
limit thread_resize_rows resource usage
use signals & slots to synchronize faq search box selectors
make sure all browser windows are closed when program is closed
implement undo/redo for row deletion, move_row and so on
check if store -> def remove_item(self, name_or_index): actually deletes the widget.
turn sidebar from tablewidget into tableview
remove background color from drag & drop rows
fix drag drop duplication of dataframes
add a way to import and set working viewer at the same time
add hotkey for adding columnns
add logging
add unittests


Performance optimization for large amounts of dataÂ¶
https://doc.qt.io/qtforpython/overviews/model-view-programming.html?highlight=model
The canFetchMore() function checks if the parent has more data available and returns true or false accordingly. The fetchMore() function fetches data based on the parent specified. Both these functions can be combined, for example, in a database query involving incremental data to populate a QAbstractItemModel . We reimplement canFetchMore() to indicate if there is more data to be fetched and fetchMore() to populate the model as required.

Another example would be dynamically populated tree models, where we reimplement fetchMore() when a branch in the tree model is expanded.

If your reimplementation of fetchMore() adds rows to the model, you need to call beginInsertRows() and endInsertRows() . Also, both canFetchMore() and fetchMore() must be reimplemented as their default implementation returns false and does nothing.

#################################################################
Bugs:

pandasgui multiline issues
cells with double new lines do not get adjusted to contents
KeyError: <PyQt5.QtCore.QPersistentModelIndex object at 0x0000021DCE40ABA0> on destruction of editor
no cell padding
toPlainText needed in order to preserve newlines
the whole program sometimes crashes without providing a traceback when randomly opening and closing editors
font-size inconsistencies

    '''Bugfix for number only entries on the excel sheet needed.
        File "c:\Users\Me\Dropbox\Python\Content Engineer Studio\main_window.py", line 348, in populate_analysis
    self.analysis.setText(self.df.loc[self.row][self.cell_selector.currentIndex() + self.cell_selector_start])
    TypeError: setText(self, str): argument 1 has unexpected type 'numpy.float64'''
----
    program crashes if a row without values is selected
----
    program crashes if excel file is closed during runtime


#################################################################
New features after revision 1

allow for deleting cell contents with DEL
allow for pasting cells in all selected cells

implement qabstractitemmodeltester https://www.youtube.com/watch?v=Tm1nNyM6Upk
implement qtestlib https://doc.qt.io/qt-5/qttestlib-tutorial1-example.html

jira connection make a new table for each story and index entries under the story number
- add who, when, story number
network database
add variants to database easily
add output such as new faq's faq changed, variants etc to table attached to main story table
add the option to set multiple questions and answering flows/FAQ's for each conversation

Database for already analyzed cases by session ID
excel like table for drag and drop copying of values

add complete flow data!

anonymize names, addresses, email addresses and phone numbers

refer to https://www.reddit.com/r/learnpython/comments/dzmakx/connecting_to_excel_workbooks_located_on/ for sharepoint details

sharepoint API: https://stackoverflow.com/questions/48424045/how-to-read-sharepoint-online-office365-excel-files-in-python-with-work-or-sch
#################################################################
Analysis suite
webscraping chat sessions for customer messages
- displaying messages and allow users to select/deselect them
- editing parts of the message so as to anonymize parts
- analyzing customer messages for parts to anonymize
- turning auto anonymizing on and off
- check if it's actually a safe link

webscrpaping chat sessions for bot messages
- analyzing bot messages for relevance
- displaying messages and allow users to select/deselect them

webscraping bot flows and suggesting relevant flows
- displaying flows and allow users to select/deselect them
- allow user to select a better suited flow/FAQ if the bot chose the wrong one and add both the correct and the incorrect flow/FAQ to Excel
- auto select according to database


read and edit open excel files
- open pages from links in excel for webscraping
- update open file with values from studio
- navigate cells
- display completed and uncompleted rows
- display filename and worksheet in status bar

options
- turn webscraping on and off
- prompt user when overwriting existing data
- mark cells that are being worked on
- automate syncing open excel file to local disk
- automate detecting open excel files

implement preloading and caching feature that loads the next x chat sessions and starts analysis queues so the user can continue immediately.
count the highlighted flows & bot answers on every save and make the program learn from user input

display relevant FAQ for flows

opening chat test environment and webscraping the results
- insert text version of the chat into excel
- insert screenshot version of the chat into excel

ev. webscraping bot confidence measurements

#################################################################
Testing suite

enter test sentence
program opens test chat and enters test sentence, retrieves answer when ready.
program matches answer to faq/flow
user selects if correct answer was given. if not, user can select the correct faq/flow
allow users to suggest a FAQ that is better suited if the one that is used works, but is not ideal.
optional Notes
write output to excel file
have the option to resubmit the previous n questions.
structure the excel file by FAQ ID and flow ID

make file searchable by questions where the bot fails to provide the correct answers.

once updates are made to faq's or flows retest all collected sentences against the new flows or FAQ's
generate output that shows which of the previously tested questions do not work with the new changes.
manually test the questions that did not produce the expected output and add details.
run selenium on server. it is infinitely scalable
create a history of performance metrics for each FAQ/flow. automate reporting and chart generation.


enter testing suite from the analysis suite and carry over the data.
save user configuration and the user's position in the excel sheet/workbook

maybe allow users to add tested questions directly to variants with the necessary highlighting

have FAQ search field check if this question has been tested. show green for untested , red for tested recently, orange for tested a long time ago
have search field check other excel lists for questions similar to the one asked and suggest search terms to the user.
#################################################################
Future prospects
-


##################################################################
requires further access/data
- writing settings to file or to registry
- displaying relevant flows and adding screenshots or path data to excel table
- open and auto fill tickets
- allow categorizing of cases and adding the details to existing open issues in order to collect them in one location.


#################################################################
libraries:
- pandas
- PyQt5
- beautifulsoup4
- selenium

#################################################################
Notes:
- source.objectName() will find the object name from the source of an event
- self.sender() will find the id of the element that fired the event
- setContextMenuPolicy(Qt::ContextMenuPolicy policy) translates to combo.setContextMenuPolicy(Qt.PreventContextMenu)
- self.chat.cellWidget(0, 0) will get the widget in the specified cell. Use .toplainText() to get the text contents.
- self.auto_queue_model.item(0, 0) will get item from a QStandardItemModel
- print(wb.sheets) will show the sheets of a workbook

- df.iloc[1,0].values will give a list with the values at grid location 1,0
- df.iloc[0:5, 0:3].values will give lists in the specified saveOnRowChange
- a dataframe of the specified range will be returned if .values is not used
- use self.df_2.columns.values to get header strings
- use str(self.pgdf.df.columns.get_level_values(0)[row]) to get values from only one level of the mulit-index

- use for message in messages:
    message.get_attribute('class') or message.get_property('class') for checking element attributes

- Qt Designer custom widgets path has this format: pandasgui.widgets.dataframe_viewer
